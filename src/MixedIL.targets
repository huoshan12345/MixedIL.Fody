<Project>
  <!--refers to https://github.com/dotnet/runtime/blob/main/src/coreclr/.nuget/Microsoft.NET.Sdk.IL/targets/Microsoft.NET.Sdk.IL.targets-->
  <PropertyGroup>
    <MicrosoftNetCoreIlasmPackageRuntimeId Condition="'$(MicrosoftNetCoreIlasmPackageRuntimeId)' == ''">$(NETCoreSdkPortableRuntimeIdentifier)</MicrosoftNetCoreIlasmPackageRuntimeId>
    <MicrosoftNETCoreILAsmVersion Condition="'$(MicrosoftNETCoreILAsmVersion)' == ''">6.0.0</MicrosoftNETCoreILAsmVersion>
    <MicrosoftNetCoreIlasmPackageName>runtime.$(MicrosoftNetCoreIlasmPackageRuntimeId).microsoft.netcore.ilasm</MicrosoftNetCoreIlasmPackageName>
    <MicrosoftNetCoreIldasmPackageName>runtime.$(MicrosoftNetCoreIlasmPackageRuntimeId).microsoft.netcore.ildasm</MicrosoftNetCoreIldasmPackageName>

    <!-- If ILAsmToolPath is specified, it will be used and no packages will be restored
         Otherwise packages will be restored and ilasm and ildasm will be referenced from their packages.  -->
    <_IlasmDir Condition="'$(ILAsmToolPath)' != ''">$([MSBuild]::NormalizeDirectory($(ILAsmToolPath)))</_IlasmDir>
  </PropertyGroup>

  <ItemGroup Condition="'$(ILAsmToolPath)' == ''">
    <_IlasmPackageReference Include="$(MicrosoftNetCoreIlasmPackageName)" Version="$(MicrosoftNETCoreILAsmVersion)" />
    <PackageReference Include="@(_IlasmPackageReference)" ExcludeAssets="native" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <ItemGroup>
    <IL Include="**\*.il" Exclude="**\obj\**\*.il;**\bin\**\*.il" />
  </ItemGroup>

  <!--Execute only when there is at least one il file.-->
  <Target Name="ProcessILAfterCompile"
          Condition="Exists(@(IL))"
          AfterTargets="Compile">
    <CallTarget Targets="ResolveIlAsmToolPaths; InitializeIL; CoreCompileIL" />

  </Target>

  <Target Name="ResolveIlAsmToolPaths">
    <ItemGroup>
      <_IlasmPackageReference NativePath="$(NuGetPackageRoot)%(Identity)\%(Version)\runtimes\$(MicrosoftNetCoreIlasmPackageRuntimeId)\native" />
      <_IlasmSourceFiles Include="%(_IlasmPackageReference.NativePath)\**\*" />
    </ItemGroup>
    <Error Condition="!Exists('%(_IlasmPackageReference.NativePath)')" Text="Package %(_IlasmPackageReference.Identity)%(_IlasmPackageReference.Version) was not restored" />

    <PropertyGroup>
      <_IlasmDir Condition="'$(_IlasmDir)' == '' and '%(_IlasmPackageReference.Identity)' == '$(MicrosoftNetCoreIlasmPackageName)'">%(_IlasmPackageReference.NativePath)\</_IlasmDir>
      <_IldasmDir Condition="'$(_IldasmDir)' == '' and '%(_IlasmPackageReference.Identity)' == '$(MicrosoftNetCoreIldasmPackageName)'">%(_IlasmPackageReference.NativePath)\</_IldasmDir>
    </PropertyGroup>
  </Target>

  <Target Name="InitializeIL">
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <PdbFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).pdb', ' ')</PdbFile>
      <PdbFileBak>$(PdbFile).bak</PdbFileBak>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
      <AssemblyFile>@(IntermediateAssembly->'"%(FullPath)"', ' ')</AssemblyFile>
    </PropertyGroup>
  </Target>

  <Target Name="CoreCompileIL">

    <PropertyGroup>
      <_OutputTypeArgument Condition="'$(OutputType)' == 'Library'">-DLL</_OutputTypeArgument>
      <_OutputTypeArgument Condition="'$(OutputType)' == 'Exe'">-EXE</_OutputTypeArgument>

      <_KeyFileArgument Condition="'$(KeyOriginatorFile)' != ''">-KEY="$(KeyOriginatorFile)"</_KeyFileArgument>

      <_IlasmSwitches>-QUIET -NOLOGO</_IlasmSwitches>
      <_IlasmSwitches Condition="'$(FoldIdenticalMethods)' == 'True'">$(_IlasmSwitches) -FOLD</_IlasmSwitches>
      <_IlasmSwitches Condition="'$(SizeOfStackReserve)' != ''">$(_IlasmSwitches) -STACK=$(SizeOfStackReserve)</_IlasmSwitches>
      <_IlasmSwitches Condition="'$(Configuration)' == 'Debug'">$(_IlasmSwitches) -DEBUG -PDBFMT=PORTABLE</_IlasmSwitches>
      <_IlasmSwitches Condition="'$(Configuration)' == 'Release'">$(_IlasmSwitches) -PDBFMT=PORTABLE</_IlasmSwitches>
      <_IlasmSwitches Condition="'$(Optimize)' == 'True'">$(_IlasmSwitches) -OPTIMIZE</_IlasmSwitches>
      <!--ResourceFile is not supported yet, see details in https://github.com/dotnet/runtime/issues/11412-->
      <!--<_IlasmSwitches Condition="'$(ILResourceFile)' != ''">$(_IlasmSwitches) -RESOURCES="$(ILResourceFile)"</_IlasmSwitches>-->

      <ILAsm>$(_IlasmDir)ilasm $(_IlasmSwitches) $(_OutputTypeArgument) $(IlasmFlags) -OUTPUT=$(AssemblyFile) </ILAsm>
    </PropertyGroup>

    <Message Text="$(ILAsm)" Importance="high"/>

    <PropertyGroup>
      <ILAsm>$(ILAsm) @(IL->'"%(FullPath)"', ' ') "$(ILFile)"</ILAsm>
    </PropertyGroup>

    <!--ilasm will delete .pdb file and .dll file-->
    <Move SourceFiles="$(PdbFile)" DestinationFiles="$(PdbFileBak)" />

    <Exec Command="$(ILAsm)">
      <Output TaskParameter="ExitCode" PropertyName="_ILAsmExitCode" />
    </Exec>
    <Error Condition="'$(_ILAsmExitCode)' != '0'" Text="ILAsm failed" />
    <!--Sets the access and modification times of files.-->
    <Touch Files="$(ILFile)" />

    <Move SourceFiles="$(PdbFileBak)" DestinationFiles="$(PdbFile)" />

    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache', ' ')" />
    </ItemGroup>
  </Target>

</Project>